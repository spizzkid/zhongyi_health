---
const images = [
  {
    src: "/image/beijing/幻灯片1.PNG",
    title: "",
    description: ""
  },
  {
    src: "/image/beijing/幻灯片2.PNG",
    title: "",
    description: ""
  },
  {
    src: "/image/beijing/幻灯片3.PNG",
    title: "",
    description: ""
  },
  {
    src: "/image/beijing/幻灯片4.PNG",
    title: "",
    description: ""
  },
  {
    src: "/image/beijing/幻灯片5.PNG",
    title: "",
    description: ""
  },
  {
    src: "/image/beijing/幻灯片6.PNG",
    title: "",
    description: ""
  },
  {
    src: "/image/beijing/幻灯片7.PNG",
    title: "",
    description: ""
  }
];
---

<div class="relative w-full max-w-[1280px] mx-auto aspect-[16/9] overflow-hidden group">
  <div class="carousel-container w-full h-full">
    <div class="carousel-slides flex transition-transform duration-300 ease-in-out">
      {images.map((image, index) => (
        <div class="carousel-slide w-full h-full flex-shrink-0" data-index={index}>
          <img src={image.src} alt={image.title} class="zoom-image w-full h-full object-contain" />
        </div>
      ))}
    </div>
  </div>
  
  <!-- 左右导航按钮 -->
  <button class="carousel-prev absolute left-4 top-1/2 -translate-y-1/2 w-12 h-12 rounded-full bg-black/50 hover:bg-black/70 flex items-center justify-center text-white transition-all shadow-lg hover:scale-110">
    <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2.5" d="M15 19l-7-7 7-7" />
    </svg>
  </button>
  <button class="carousel-next absolute right-4 top-1/2 -translate-y-1/2 w-12 h-12 rounded-full bg-black/50 hover:bg-black/70 flex items-center justify-center text-white transition-all shadow-lg hover:scale-110">
    <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2.5" d="M9 5l7 7-7 7" />
    </svg>
  </button>
  
  <!-- 底部导航点 -->
  <div class="absolute bottom-4 left-0 right-0 flex justify-center gap-2">
    {images.map((_, index) => (
      <button
        class="w-2 h-2 rounded-full bg-white/50 hover:bg-white/80 transition-colors carousel-dot"
        data-index={index}
        aria-label={`Slide ${index + 1}`}
      ></button>
    ))}
  </div>
</div>

<script>
  function setupCarousel() {
    const container = document.querySelector('.carousel-container');
    const slides = document.querySelector('.carousel-slides');
    const prevButton = document.querySelector('.carousel-prev');
    const nextButton = document.querySelector('.carousel-next');
    const dots = document.querySelectorAll('.carousel-dot');
    const slideCount = document.querySelectorAll('.carousel-slide').length;
    let currentSlide = 0;
    let autoplayInterval: ReturnType<typeof setInterval>;

    function updateSlidePosition() {
      if (slides) {
        slides.style.transform = `translateX(-${currentSlide * 100}%)`;
        // 更新指示器
        dots.forEach((dot, index) => {
          dot.classList.toggle('bg-white', index === currentSlide);
          dot.classList.toggle('bg-white/50', index !== currentSlide);
        });
      }
    }

    function nextSlide() {
      currentSlide = (currentSlide + 1) % slideCount;
      updateSlidePosition();
    }

    function prevSlide() {
      currentSlide = (currentSlide - 1 + slideCount) % slideCount;
      updateSlidePosition();
    }

    // 添加按钮事件监听器
    prevButton?.addEventListener('click', () => {
      prevSlide();
      resetAutoPlay();
    });

    nextButton?.addEventListener('click', () => {
      nextSlide();
      resetAutoPlay();
    });

    // 添加指示器点击事件
    dots.forEach((dot, index) => {
      dot.addEventListener('click', () => {
        currentSlide = index;
        updateSlidePosition();
        resetAutoPlay();
      });
    });

    function startAutoPlay() {
      autoplayInterval = setInterval(nextSlide, 3000);
    }

    function stopAutoPlay() {
      clearInterval(autoplayInterval);
    }

    function resetAutoPlay() {
      stopAutoPlay();
      startAutoPlay();
    }

    // 鼠标悬停时暂停自动播放
    container?.addEventListener('mouseenter', stopAutoPlay);
    container?.addEventListener('mouseleave', startAutoPlay);

    // 初始化第一个指示器为激活状态
    updateSlidePosition();
    startAutoPlay();
  }

  // 当页面加载完成时初始化轮播
  document.addEventListener('astro:page-load', setupCarousel);
  // 为了确保在首次加载时也能运行
  setupCarousel();
</script> 